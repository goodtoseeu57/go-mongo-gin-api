// Code generated by MockGen. DO NOT EDIT.
// Source: config/db.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	models "my-api/module/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockMongoRepository is a mock of MongoRepository interface.
type MockMongoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMongoRepositoryMockRecorder
}

// MockMongoRepositoryMockRecorder is the mock recorder for MockMongoRepository.
type MockMongoRepositoryMockRecorder struct {
	mock *MockMongoRepository
}

// NewMockMongoRepository creates a new mock instance.
func NewMockMongoRepository(ctrl *gomock.Controller) *MockMongoRepository {
	mock := &MockMongoRepository{ctrl: ctrl}
	mock.recorder = &MockMongoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoRepository) EXPECT() *MockMongoRepositoryMockRecorder {
	return m.recorder
}

// FindOneNote mocks base method.
func (m *MockMongoRepository) FindOneNote(ctx context.Context, filter bson.M) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneNote", ctx, filter)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneNote indicates an expected call of FindOneNote.
func (mr *MockMongoRepositoryMockRecorder) FindOneNote(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneNote", reflect.TypeOf((*MockMongoRepository)(nil).FindOneNote), ctx, filter)
}
